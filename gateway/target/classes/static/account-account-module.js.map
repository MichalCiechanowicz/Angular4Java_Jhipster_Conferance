{"version":3,"sources":["./src/main/webapp/app/account/settings/settings.route.ts","./src/main/webapp/app/account/password/password.service.ts","./src/main/webapp/app/account/register/register.component.ts","./src/main/webapp/app/account/register/register.component.html","./src/main/webapp/app/account/register/register.route.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.html","./src/main/webapp/app/account/activate/activate.component.ts","./src/main/webapp/app/account/activate/activate.component.html","./src/main/webapp/app/account/activate/activate.service.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.route.ts","./src/main/webapp/app/config/error.constants.ts","./src/main/webapp/app/account/password/password.component.ts","./src/main/webapp/app/account/password/password.component.html","./src/main/webapp/app/account/password/password-strength-bar/password-strength-bar.component.ts","./src/main/webapp/app/account/password/password-strength-bar/password-strength-bar.component.html","./src/main/webapp/app/account/password-reset/init/password-reset-init.service.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.route.ts","./src/main/webapp/app/account/register/register.service.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.component.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.component.html","./src/main/webapp/app/account/account.route.ts","./src/main/webapp/app/account/account.module.ts","./src/main/webapp/app/account/activate/activate.route.ts","./src/main/webapp/app/account/password/password.route.ts","./src/main/webapp/app/account/settings/settings.component.ts","./src/main/webapp/app/account/settings/settings.component.html","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.service.ts"],"names":[],"mappings":"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","file":"account-account-module.js","sourcesContent":["import { Route } from '@angular/router';\n\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access.service';\nimport { SettingsComponent } from './settings.component';\n\nexport const settingsRoute: Route = {\n  path: 'settings',\n  component: SettingsComponent,\n  data: {\n    pageTitle: 'global.menu.account.settings',\n  },\n  canActivate: [UserRouteAccessService],\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(newPassword: string, currentPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/change-password'), { currentPassword, newPassword });\n  }\n}\n","import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/config/error.constants';\nimport { RegisterService } from './register.service';\n\n@Component({\n  selector: 'jhi-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements AfterViewInit {\n  @ViewChild('login', { static: false })\n  login?: ElementRef;\n\n  doNotMatch = false;\n  error = false;\n  errorEmailExists = false;\n  errorUserExists = false;\n  success = false;\n\n  registerForm = this.fb.group({\n    login: [\n      '',\n      [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern('^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$'),\n      ],\n    ],\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private translateService: TranslateService, private registerService: RegisterService, private fb: FormBuilder) {}\n\n  ngAfterViewInit(): void {\n    if (this.login) {\n      this.login.nativeElement.focus();\n    }\n  }\n\n  register(): void {\n    this.doNotMatch = false;\n    this.error = false;\n    this.errorEmailExists = false;\n    this.errorUserExists = false;\n\n    const password = this.registerForm.get(['password'])!.value;\n    if (password !== this.registerForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      const login = this.registerForm.get(['login'])!.value;\n      const email = this.registerForm.get(['email'])!.value;\n      this.registerService.save({ login, email, password, langKey: this.translateService.currentLang }).subscribe(\n        () => (this.success = true),\n        response => this.processError(response)\n      );\n    }\n  }\n\n  private processError(response: HttpErrorResponse): void {\n    if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n      this.errorUserExists = true;\n    } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n      this.errorEmailExists = true;\n    } else {\n      this.error = true;\n    }\n  }\n}\n","<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"register.title\" data-cy=\"registerTitle\">Registration</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"register.messages.success\">\n        <strong>Registration saved!</strong> Please check your email for confirmation.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"register.messages.error.fail\">\n        <strong>Registration failed!</strong> Please try again later.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorUserExists\" jhiTranslate=\"register.messages.error.userexists\">\n        <strong>Login name already registered!</strong> Please choose another one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorEmailExists\" jhiTranslate=\"register.messages.error.emailexists\">\n        <strong>Email is already in use!</strong> Please choose another one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"register()\" [formGroup]=\"registerForm\" *ngIf=\"!success\">\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"login\" jhiTranslate=\"global.form.username.label\">Username</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"login\"\n            name=\"login\"\n            placeholder=\"{{ 'global.form.username.placeholder' | translate }}\"\n            formControlName=\"login\"\n            data-cy=\"username\"\n            #login\n          />\n\n          <div *ngIf=\"registerForm.get('login')!.invalid && (registerForm.get('login')!.dirty || registerForm.get('login')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.required\"\n              jhiTranslate=\"register.messages.validate.login.required\"\n            >\n              Your username is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.minlength\"\n              jhiTranslate=\"register.messages.validate.login.minlength\"\n            >\n              Your username is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.maxlength\"\n              jhiTranslate=\"register.messages.validate.login.maxlength\"\n            >\n              Your username cannot be longer than 50 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.pattern\"\n              jhiTranslate=\"register.messages.validate.login.pattern\"\n            >\n              Your username can only contain letters and digits.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"registerForm.get('email')!.invalid && (registerForm.get('email')!.dirty || registerForm.get('email')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.invalid\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"password\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"password\"\n            name=\"password\"\n            placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n            formControlName=\"password\"\n            data-cy=\"firstPassword\"\n          />\n\n          <div\n            *ngIf=\"registerForm.get('password')!.invalid && (registerForm.get('password')!.dirty || registerForm.get('password')!.touched)\"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n            >\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n            >\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"registerForm.get('password')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\"\n            >New password confirmation</label\n          >\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"secondPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              registerForm.get('confirmPassword')!.invalid &&\n              (registerForm.get('confirmPassword')!.dirty || registerForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n            >\n              Your confirmation password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n            >\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n            >\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"registerForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"register.form.button\"\n          data-cy=\"submit\"\n        >\n          Register\n        </button>\n      </form>\n\n      <div class=\"mt-3 alert alert-warning\">\n        <span jhiTranslate=\"global.messages.info.authenticated.prefix\">If you want to </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a\n        ><span jhiTranslate=\"global.messages.info.authenticated.suffix\"\n          >, you can try the default accounts:<br />- Administrator (login=\"admin\" and password=\"admin\") <br />- User (login=\"user\" and\n          password=\"user\").</span\n        >\n      </div>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { RegisterComponent } from './register.component';\n\nexport const registerRoute: Route = {\n  path: 'register',\n  component: RegisterComponent,\n  data: {\n    pageTitle: 'register.title',\n  },\n};\n","import { Component, OnInit, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { PasswordResetFinishService } from './password-reset-finish.service';\n\n@Component({\n  selector: 'jhi-password-reset-finish',\n  templateUrl: './password-reset-finish.component.html',\n})\nexport class PasswordResetFinishComponent implements OnInit, AfterViewInit {\n  @ViewChild('newPassword', { static: false })\n  newPassword?: ElementRef;\n\n  initialized = false;\n  doNotMatch = false;\n  error = false;\n  success = false;\n  key = '';\n\n  passwordForm = this.fb.group({\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private passwordResetFinishService: PasswordResetFinishService, private route: ActivatedRoute, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params['key']) {\n        this.key = params['key'];\n      }\n      this.initialized = true;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.newPassword) {\n      this.newPassword.nativeElement.focus();\n    }\n  }\n\n  finishReset(): void {\n    this.doNotMatch = false;\n    this.error = false;\n\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\n    const confirmPassword = this.passwordForm.get(['confirmPassword'])!.value;\n\n    if (newPassword !== confirmPassword) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordResetFinishService.save(this.key, newPassword).subscribe(\n        () => (this.success = true),\n        () => (this.error = true)\n      );\n    }\n  }\n}\n","<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-4\">\n      <h1 jhiTranslate=\"reset.finish.title\">Reset password</h1>\n\n      <div class=\"alert alert-danger\" jhiTranslate=\"reset.finish.messages.keymissing\" *ngIf=\"initialized && !key\">\n        <strong>The password reset key is missing.</strong>\n      </div>\n\n      <div class=\"alert alert-warning\" *ngIf=\"key && !success\">\n        <span jhiTranslate=\"reset.finish.messages.info\">Choose a new password</span>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <span jhiTranslate=\"reset.finish.messages.error\"\n          >Your password couldn't be reset. Remember a password request is only valid for 24 hours.</span\n        >\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"reset.finish.messages.success\"><strong>Your password has been reset.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n\n      <div *ngIf=\"key && !success\">\n        <form name=\"form\" role=\"form\" (ngSubmit)=\"finishReset()\" [formGroup]=\"passwordForm\">\n          <div class=\"form-group\">\n            <label class=\"form-control-label\" for=\"newPassword\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"newPassword\"\n              name=\"newPassword\"\n              placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n              formControlName=\"newPassword\"\n              data-cy=\"resetPassword\"\n              #newPassword\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('newPassword')!.invalid &&\n                (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n              \"\n            >\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.required\"\n                jhiTranslate=\"global.messages.validate.newpassword.required\"\n              >\n                Your password is required.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\"\n                jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n              >\n                Your password is required to be at least 4 characters.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\"\n                jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n              >\n                Your password cannot be longer than 50 characters.\n              </small>\n            </div>\n\n            <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\"\n              >New password confirmation</label\n            >\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n              formControlName=\"confirmPassword\"\n              data-cy=\"confirmResetPassword\"\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('confirmPassword')!.invalid &&\n                (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n              \"\n            >\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n              >\n                Your password confirmation is required.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n              >\n                Your password confirmation is required to be at least 4 characters.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n              >\n                Your password confirmation cannot be longer than 50 characters.\n              </small>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            [disabled]=\"passwordForm.invalid\"\n            class=\"btn btn-primary\"\n            jhiTranslate=\"reset.finish.form.button\"\n            data-cy=\"submit\"\n          >\n            Reset Password\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { ActivateService } from './activate.service';\n\n@Component({\n  selector: 'jhi-activate',\n  templateUrl: './activate.component.html',\n})\nexport class ActivateComponent implements OnInit {\n  error = false;\n  success = false;\n\n  constructor(private activateService: ActivateService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.pipe(mergeMap(params => this.activateService.get(params.key))).subscribe(\n      () => (this.success = true),\n      () => (this.error = true)\n    );\n  }\n}\n","<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"activate.title\">Activation</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"activate.messages.success\"><strong>Your user account has been activated.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"activate.messages.error\">\n        <strong>Your user could not be activated.</strong> Please use the registration form to sign up.\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ActivateService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  get(key: string): Observable<{}> {\n    return this.http.get(this.applicationConfigService.getEndpointFor('api/activate'), {\n      params: new HttpParams().set('key', key),\n    });\n  }\n}\n","import { Route } from '@angular/router';\n\nimport { PasswordResetFinishComponent } from './password-reset-finish.component';\n\nexport const passwordResetFinishRoute: Route = {\n  path: 'reset/finish',\n  component: PasswordResetFinishComponent,\n  data: {\n    pageTitle: 'global.menu.account.password',\n  },\n};\n","export const PROBLEM_BASE_URL = 'https://www.jhipster.tech/problem';\nexport const EMAIL_ALREADY_USED_TYPE = PROBLEM_BASE_URL + '/email-already-used';\nexport const LOGIN_ALREADY_USED_TYPE = PROBLEM_BASE_URL + '/login-already-used';\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { PasswordService } from './password.service';\n\n@Component({\n  selector: 'jhi-password',\n  templateUrl: './password.component.html',\n})\nexport class PasswordComponent implements OnInit {\n  doNotMatch = false;\n  error = false;\n  success = false;\n  account$?: Observable<Account | null>;\n  passwordForm = this.fb.group({\n    currentPassword: ['', [Validators.required]],\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n  });\n\n  constructor(private passwordService: PasswordService, private accountService: AccountService, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.account$ = this.accountService.identity();\n  }\n\n  changePassword(): void {\n    this.error = false;\n    this.success = false;\n    this.doNotMatch = false;\n\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\n    if (newPassword !== this.passwordForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordService.save(newPassword, this.passwordForm.get(['currentPassword'])!.value).subscribe(\n        () => (this.success = true),\n        () => (this.error = true)\n      );\n    }\n  }\n}\n","<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\" *ngIf=\"account$ | async as account\">\n      <h2 jhiTranslate=\"password.title\" [translateValues]=\"{ username: account.login }\">\n        Password for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"password.messages.success\">\n        <strong>Password changed!</strong>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"password.messages.error\">\n        <strong>An error has occurred!</strong> The password could not be changed.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"changePassword()\" [formGroup]=\"passwordForm\">\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"currentPassword\" jhiTranslate=\"global.form.currentpassword.label\">Current password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"currentPassword\"\n            name=\"currentPassword\"\n            placeholder=\"{{ 'global.form.currentpassword.placeholder' | translate }}\"\n            formControlName=\"currentPassword\"\n            data-cy=\"currentPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('currentPassword')!.invalid &&\n              (passwordForm.get('currentPassword')!.dirty || passwordForm.get('currentPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('currentPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"newPassword\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"newPassword\"\n            name=\"newPassword\"\n            placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n            formControlName=\"newPassword\"\n            data-cy=\"newPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('newPassword')!.invalid &&\n              (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n            >\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n            >\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\"\n            >New password confirmation</label\n          >\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"confirmPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('confirmPassword')!.invalid &&\n              (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n            >\n              Your confirmation password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n            >\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n            >\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"passwordForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"password.form.button\"\n          data-cy=\"submit\"\n        >\n          Save\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\n\n@Component({\n  selector: 'jhi-password-strength-bar',\n  templateUrl: './password-strength-bar.component.html',\n  styleUrls: ['./password-strength-bar.component.scss'],\n})\nexport class PasswordStrengthBarComponent {\n  colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) {}\n\n  measureStrength(p: string): number {\n    let force = 0;\n    const regex = /[$-/:-?{-~!\"^_`[\\]]/g; // \"\n    const lowerLetters = /[a-z]+/.test(p);\n    const upperLetters = /[A-Z]+/.test(p);\n    const numbers = /[0-9]+/.test(p);\n    const symbols = regex.test(p);\n\n    const flags = [lowerLetters, upperLetters, numbers, symbols];\n    const passedMatches = flags.filter((isMatchedFlag: boolean) => isMatchedFlag === true).length;\n\n    force += 2 * p.length + (p.length >= 10 ? 1 : 0);\n    force += passedMatches * 10;\n\n    // penalty (short password)\n    force = p.length <= 6 ? Math.min(force, 10) : force;\n\n    // penalty (poor variety of characters)\n    force = passedMatches === 1 ? Math.min(force, 10) : force;\n    force = passedMatches === 2 ? Math.min(force, 20) : force;\n    force = passedMatches === 3 ? Math.min(force, 40) : force;\n\n    return force;\n  }\n\n  getColor(s: number): { idx: number; color: string } {\n    let idx = 0;\n    if (s > 10) {\n      if (s <= 20) {\n        idx = 1;\n      } else if (s <= 30) {\n        idx = 2;\n      } else if (s <= 40) {\n        idx = 3;\n      } else {\n        idx = 4;\n      }\n    }\n    return { idx: idx + 1, color: this.colors[idx] };\n  }\n\n  @Input()\n  set passwordToCheck(password: string) {\n    if (password) {\n      const c = this.getColor(this.measureStrength(password));\n      const element = this.elementRef.nativeElement;\n      if (element.className) {\n        this.renderer.removeClass(element, element.className);\n      }\n      const lis = element.getElementsByTagName('li');\n      for (let i = 0; i < lis.length; i++) {\n        if (i < c.idx) {\n          this.renderer.setStyle(lis[i], 'backgroundColor', c.color);\n        } else {\n          this.renderer.setStyle(lis[i], 'backgroundColor', '#DDD');\n        }\n      }\n    }\n  }\n}\n","<div id=\"strength\">\n  <small jhiTranslate=\"global.messages.validate.newpassword.strength\">Password strength:</small>\n  <ul id=\"strengthBar\">\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n  </ul>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordResetInitService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(mail: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/reset-password/init'), mail);\n  }\n}\n","import { Route } from '@angular/router';\n\nimport { PasswordResetInitComponent } from './password-reset-init.component';\n\nexport const passwordResetInitRoute: Route = {\n  path: 'reset/request',\n  component: PasswordResetInitComponent,\n  data: {\n    pageTitle: 'global.menu.account.password',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Registration } from './register.model';\n\n@Injectable({ providedIn: 'root' })\nexport class RegisterService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(registration: Registration): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/register'), registration);\n  }\n}\n","import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { PasswordResetInitService } from './password-reset-init.service';\n\n@Component({\n  selector: 'jhi-password-reset-init',\n  templateUrl: './password-reset-init.component.html',\n})\nexport class PasswordResetInitComponent implements AfterViewInit {\n  @ViewChild('email', { static: false })\n  email?: ElementRef;\n\n  success = false;\n  resetRequestForm = this.fb.group({\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n  });\n\n  constructor(private passwordResetInitService: PasswordResetInitService, private fb: FormBuilder) {}\n\n  ngAfterViewInit(): void {\n    if (this.email) {\n      this.email.nativeElement.focus();\n    }\n  }\n\n  requestReset(): void {\n    this.passwordResetInitService.save(this.resetRequestForm.get(['email'])!.value).subscribe(() => (this.success = true));\n  }\n}\n","<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"reset.request.title\">Reset your password</h1>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <div class=\"alert alert-warning\" *ngIf=\"!success\">\n        <span jhiTranslate=\"reset.request.messages.info\">Enter the email address you used to register.</span>\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"reset.request.messages.success\">Check your emails for details on how to reset your password.</span>\n      </div>\n\n      <form *ngIf=\"!success\" name=\"form\" role=\"form\" (ngSubmit)=\"requestReset()\" [formGroup]=\"resetRequestForm\">\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"emailResetPassword\"\n            #email\n          />\n\n          <div\n            *ngIf=\"\n              resetRequestForm.get('email')!.invalid && (resetRequestForm.get('email')!.dirty || resetRequestForm.get('email')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.email\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"resetRequestForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"reset.request.form.button\"\n          data-cy=\"submit\"\n        >\n          Reset\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Routes } from '@angular/router';\n\nimport { activateRoute } from './activate/activate.route';\nimport { passwordRoute } from './password/password.route';\nimport { passwordResetFinishRoute } from './password-reset/finish/password-reset-finish.route';\nimport { passwordResetInitRoute } from './password-reset/init/password-reset-init.route';\nimport { registerRoute } from './register/register.route';\nimport { settingsRoute } from './settings/settings.route';\n\nconst ACCOUNT_ROUTES = [activateRoute, passwordRoute, passwordResetFinishRoute, passwordResetInitRoute, registerRoute, settingsRoute];\n\nexport const accountState: Routes = [\n  {\n    path: '',\n    children: ACCOUNT_ROUTES,\n  },\n];\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PasswordStrengthBarComponent } from './password/password-strength-bar/password-strength-bar.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ActivateComponent } from './activate/activate.component';\nimport { PasswordComponent } from './password/password.component';\nimport { PasswordResetInitComponent } from './password-reset/init/password-reset-init.component';\nimport { PasswordResetFinishComponent } from './password-reset/finish/password-reset-finish.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { accountState } from './account.route';\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild(accountState)],\n  declarations: [\n    ActivateComponent,\n    RegisterComponent,\n    PasswordComponent,\n    PasswordStrengthBarComponent,\n    PasswordResetInitComponent,\n    PasswordResetFinishComponent,\n    SettingsComponent,\n  ],\n})\nexport class AccountModule {}\n","import { Route } from '@angular/router';\n\nimport { ActivateComponent } from './activate.component';\n\nexport const activateRoute: Route = {\n  path: 'activate',\n  component: ActivateComponent,\n  data: {\n    pageTitle: 'activate.title',\n  },\n};\n","import { Route } from '@angular/router';\n\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access.service';\nimport { PasswordComponent } from './password.component';\n\nexport const passwordRoute: Route = {\n  path: 'password',\n  component: PasswordComponent,\n  data: {\n    pageTitle: 'global.menu.account.password',\n  },\n  canActivate: [UserRouteAccessService],\n};\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { LANGUAGES } from 'app/config/language.constants';\n\n@Component({\n  selector: 'jhi-settings',\n  templateUrl: './settings.component.html',\n})\nexport class SettingsComponent implements OnInit {\n  account!: Account;\n  success = false;\n  languages = LANGUAGES;\n  settingsForm = this.fb.group({\n    firstName: [undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]],\n    lastName: [undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(50)]],\n    email: [undefined, [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    langKey: [undefined],\n  });\n\n  constructor(private accountService: AccountService, private fb: FormBuilder, private translateService: TranslateService) {}\n\n  ngOnInit(): void {\n    this.accountService.identity().subscribe(account => {\n      if (account) {\n        this.settingsForm.patchValue({\n          firstName: account.firstName,\n          lastName: account.lastName,\n          email: account.email,\n          langKey: account.langKey,\n        });\n\n        this.account = account;\n      }\n    });\n  }\n\n  save(): void {\n    this.success = false;\n\n    this.account.firstName = this.settingsForm.get('firstName')!.value;\n    this.account.lastName = this.settingsForm.get('lastName')!.value;\n    this.account.email = this.settingsForm.get('email')!.value;\n    this.account.langKey = this.settingsForm.get('langKey')!.value;\n\n    this.accountService.save(this.account).subscribe(() => {\n      this.success = true;\n\n      this.accountService.authenticate(this.account);\n\n      if (this.account.langKey !== this.translateService.currentLang) {\n        this.translateService.use(this.account.langKey);\n      }\n    });\n  }\n}\n","<div>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-8\">\n      <h2 jhiTranslate=\"settings.title\" [translateValues]=\"{ username: account.login }\" *ngIf=\"account\">\n        User settings for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"settings.messages.success\">\n        <strong>Settings saved!</strong>\n      </div>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"save()\" [formGroup]=\"settingsForm\" *ngIf=\"account\" novalidate>\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"firstName\" jhiTranslate=\"settings.form.firstname\">First Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"firstName\"\n            name=\"firstName\"\n            placeholder=\"{{ 'settings.form.firstname.placeholder' | translate }}\"\n            formControlName=\"firstName\"\n            data-cy=\"firstname\"\n          />\n\n          <div\n            *ngIf=\"\n              settingsForm.get('firstName')!.invalid && (settingsForm.get('firstName')!.dirty || settingsForm.get('firstName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.required\"\n              jhiTranslate=\"settings.messages.validate.firstname.required\"\n            >\n              Your first name is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.minlength\"\n              jhiTranslate=\"settings.messages.validate.firstname.minlength\"\n            >\n              Your first name is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.maxlength\"\n              jhiTranslate=\"settings.messages.validate.firstname.maxlength\"\n            >\n              Your first name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"lastName\" jhiTranslate=\"settings.form.lastname\">Last Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"lastName\"\n            name=\"lastName\"\n            placeholder=\"{{ 'settings.form.lastname.placeholder' | translate }}\"\n            formControlName=\"lastName\"\n            data-cy=\"lastname\"\n          />\n\n          <div\n            *ngIf=\"settingsForm.get('lastName')!.invalid && (settingsForm.get('lastName')!.dirty || settingsForm.get('lastName')!.touched)\"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.required\"\n              jhiTranslate=\"settings.messages.validate.lastname.required\"\n            >\n              Your last name is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.minlength\"\n              jhiTranslate=\"settings.messages.validate.lastname.minlength\"\n            >\n              Your last name is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.maxlength\"\n              jhiTranslate=\"settings.messages.validate.lastname.maxlength\"\n            >\n              Your last name cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"form-control-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"settingsForm.get('email')!.invalid && (settingsForm.get('email')!.dirty || settingsForm.get('email')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.email\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 100 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"form-group\" *ngIf=\"languages && languages.length > 0\">\n          <label for=\"langKey\" jhiTranslate=\"settings.form.language\">Language</label>\n          <select class=\"form-control\" id=\"langKey\" name=\"langKey\" formControlName=\"langKey\" data-cy=\"langKey\">\n            <option *ngFor=\"let language of languages\" [value]=\"language\">{{ language | findLanguageFromKey }}</option>\n          </select>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"settingsForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"settings.form.button\"\n          data-cy=\"submit\"\n        >\n          Save\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordResetFinishService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(key: string, newPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/reset-password/finish'), { key, newPassword });\n  }\n}\n"],"sourceRoot":"webpack:///"}